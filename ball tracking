{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "354aabb8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Requirement already satisfied: opencv-python in c:\\users\\ridds\\anaconda3\\lib\\site-packages (4.8.1.78)\n",
      "Requirement already satisfied: numpy>=1.21.2 in c:\\users\\ridds\\anaconda3\\lib\\site-packages (from opencv-python) (1.24.3)\n"
     ]
    }
   ],
   "source": [
    "!pip install opencv-python\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "f5b27f2d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 1,
   "id": "289445f8",
   "metadata": {},
   "outputs": [],
   "source": [
    "import cv2\n",
    "import numpy as np\n",
    "\n",
    "def track_green_ball():\n",
    "    video_path = r'C:\\Users\\ridds\\Desktop\\rugved video.mp4'\n",
    "    capture = cv2.VideoCapture(video_path)\n",
    "\n",
    "    if not capture.isOpened():\n",
    "        print(\"Error: Couldn't open video file.\")\n",
    "        return\n",
    "\n",
    "    lower_green = np.array([40, 40, 40])\n",
    "    upper_green = np.array([80, 255, 255])\n",
    "\n",
    "    while True:\n",
    "        ret, frame = capture.read()\n",
    "\n",
    "        if not ret:\n",
    "            break\n",
    "\n",
    "        hsv = cv2.cvtColor(frame, cv2.COLOR_BGR2HSV)\n",
    "\n",
    "        mask = cv2.inRange(hsv, lower_green, upper_green)\n",
    "\n",
    "        contours, hierarchy = cv2.findContours(mask.copy(), cv2.RETR_EXTERNAL, cv2.CHAIN_APPROX_SIMPLE)\n",
    "\n",
    "        if len(contours) > 0:\n",
    "            largest_contour = max(contours, key=cv2.contourArea)\n",
    "            (x, y), radius = cv2.minEnclosingCircle(largest_contour)\n",
    "            center = (int(x), int(y))\n",
    "            radius = int(radius)\n",
    "            cv2.circle(frame, center, radius, (0, 0, 0), 4)\n",
    "\n",
    "        cv2.imshow('Tracking video', frame)\n",
    "\n",
    "        if cv2.waitKey(1) & 0xFF == ord('q'):\n",
    "            break\n",
    "\n",
    "    capture.release()\n",
    "    cv2.destroyAllWindows()\n",
    "\n",
    "track_green_ball()\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "id": "bdaf8845",
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.11.5"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
